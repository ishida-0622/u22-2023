/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    // id("org.jetbrains.kotlin.jvm") version "1.7.10"
    kotlin("jvm") version "1.8.21"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("aws.sdk.kotlin:dynamodb:0.18.0-beta")
    implementation("aws.sdk.kotlin:lambda:0.18.0-beta")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.6.10")
    implementation ("com.amazonaws:aws-lambda-java-core:1.2.2")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1")

    // JSON処理用ライブラリ
    implementation("com.google.code.gson:gson:2.10.1")

    // implementation("org.slf4j:slf4j-simple:1.7.26")
    // implementation(kotlin("stdlib"))

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.1")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")
    implementation ("com.google.code.gson:gson:2.8.6")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("tic.u22.AuthKt")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks {
    create<Zip>("buildZip") {
        archiveFileName.set("lambda_function_payload.zip")
        from(compileKotlin)
        from(processResources)
        into("lib") {
            from(configurations.runtimeClasspath)
        }
    }
}
